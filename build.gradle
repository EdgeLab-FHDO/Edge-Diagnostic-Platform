plugins {
    //Application plugin which implicitly includes java plugin
    //Makes the app runnable on CL (gradle run)
    id 'application'
}
application {
    //Necessary configuration for application plugin, path to the main method
    mainClassName = 'InfrastructureManager.Master'
}

group 'de.fh-dortmund'
version '0.5'

task printInfo() {
    doLast {
        sourceSets.main.runtimeClasspath.files.each {
            print "  " + it.path + "\n"
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes "Main-Class": mainClassName
    }
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

run {
    //Informs Gradle that we are using System.in as our console input (required for Scanner to work properly)
    standardInput = System.in
}

repositories {
    //Where to get the dependencies
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.0'
    implementation 'com.sparkjava:spark-core:2.9.2'
    implementation files('libraries/opencv/opencv-450.jar')
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'

    testImplementation 'io.rest-assured:rest-assured:4.3.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.27.2'
}

javadoc {
    destinationDir = file("${rootDir}/javadocs")
    options.addBooleanOption('html5', true)
}
